"use strict";(self.webpackChunktechnical_notes_for_microsoft_workloads_on_aws=self.webpackChunktechnical_notes_for_microsoft_workloads_on_aws||[]).push([[4318],{7483:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/IMG-1-2ccaf07752310404a5baa35efc18c5fe.png"},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var s=t(6540);const r={},o=s.createContext(r);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:n},e.children)}},9910:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"Active-Directory/Guides/Guide1/index","title":"Quickly deploy a self-managed AD Forest on Amazon EC2","description":"by Tekena Orugbani","source":"@site/docs/Active-Directory/Guides/Guide1/index.md","sourceDirName":"Active-Directory/Guides/Guide1","slug":"/Active-Directory/Guides/Guide1/","permalink":"/technical-notes-for-microsoft-workloads-on-aws/Active-Directory/Guides/Guide1/","draft":false,"unlisted":false,"editUrl":"https://github.com/aws-samples/technical-notes-for-microsoft-workloads-on-aws/blob/main/docusaurus/docs/Active-Directory/Guides/Guide1/index.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10,"sidebar_label":"Quickly deploy a self-managed AD Forest on Amazon EC2"},"sidebar":"tutorialSidebar","previous":{"title":"Guides","permalink":"/technical-notes-for-microsoft-workloads-on-aws/Active-Directory/Guides/"},"next":{"title":"Optimizing Directory Sharing in AWS Managed Microsoft AD","permalink":"/technical-notes-for-microsoft-workloads-on-aws/Active-Directory/Guides/Guide2/"}}');var r=t(4848),o=t(8453);const a={sidebar_position:10,sidebar_label:"Quickly deploy a self-managed AD Forest on Amazon EC2"},i="Quickly deploy a self-managed AD Forest on Amazon EC2",c={},d=[];function l(e){const n={code:"code",h1:"h1",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"quickly-deploy-a-self-managed-ad-forest-on-amazon-ec2",children:"Quickly deploy a self-managed AD Forest on Amazon EC2"})}),"\n",(0,r.jsx)(n.p,{children:"by Tekena Orugbani"}),"\n",(0,r.jsx)(n.p,{children:'When working with customers, I often need to spin up and spin down Active Directory Forests to test customer use cases. I use the scripts below to spin up a new AD Forest called "example.com". You can run this script as userdata when launching a new EC2 instance or you can execute the script via AWS Systems Manager Session Manager after the new instance is launched. Either way works. And if you want to add a second domain controller to the AD forest, run the second script.'}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"IMAGE1",src:t(7483).A+"",width:"519",height:"343"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"First, store the local Administrator of your EC2 instance as a secret in Secrets Manager."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'@\'\n{\n    "username": "Administrator",\n    "password": "YourPassword"\n}\n\'@ | Set-Content -Path "C:\\Users\\$env:USERNAME\\Documents\\admin-cred.json"\n\naws secretsmanager create-secret `\n--name LocalAdministrator `\n--secret-string file://C:/Users/$env:USERNAME/Documents/admin-cred.json\n\nRemove-Item -Path "C:\\Users\\$env:USERNAME\\Documents\\admin-cred.json" -Force\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"Now, create your first Domain Controller and the new Forest:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"#Deploy New Forest PowerShell\n$domain = \"example.com\" \n$Username = ((Get-SECSecretValue -region us-east-1 -SecretId LocalAdministrator).SecretString | ConvertFrom-JSON).username\n$FinalUserName = $domain + '\\' + $Username\n$Password = ((Get-SECSecretValue -region us-east-1 -SecretId LocalAdministrator).SecretString | ConvertFrom-JSON).password\n$Credential = New-Object System.Management.Automation.PsCredential($FinalUserName,$Password)\n\nInstall-WindowsFeature -name AD-Domain-Services -IncludeManagementTools\nInstall-ADDSForest -DomainName example.com -DomainNetBIOSName EXAMPLE -InstallDNS -SafeModeAdministratorPassword $Password -confirm:$false\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"To deploy a new domain controller to the new forest, first obtain the private IP address of the first domain controller above and replace in the script below. It also assumes the local Admin password of this new EC2 instance is the same as the first one. Run this:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'##Build new DC in an existing domain\nGet-NetAdapter | Select-Object InterfaceAlias , InterfaceIndex\n$IntIndex = Get-NetAdapter | where {$_.ifDesc -notlike "TAP*"} | foreach InterfaceIndex | select -First 1\nSet-DnsClientServerAddress -InterfaceIndex $IntIndex -ServerAddresses ("IP Address of first DC")\n\n$domain = "example.com"\n$Username = ((Get-SECSecretValue -region us-east-1 -SecretId LocalAdministrator).SecretString | ConvertFrom-JSON).username\n$FinalUserName = $domain + \'\\\' + $Username\n$Password = ((Get-SECSecretValue -region us-east-1 -SecretId LocalAdministrator).SecretString | ConvertFrom-JSON).password\n$Credential = New-Object System.Management.Automation.PsCredential($FinalUserName,$Password)\n\nInstall-WindowsFeature -name AD-Domain-Services -IncludeManagementTools\nInstall-ADDSDomainController -DomainName $domain -InstallDns:$true -Credential $Credential -SafeModeAdministratorPassword $Password -confirm:$false\n;\n'})})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);